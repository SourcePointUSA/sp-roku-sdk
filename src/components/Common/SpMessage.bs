sub init()
    m.top.observeField("changeView", "changeView")
    m.top.observeField("message", "showMessage")

    m.viewHistory = []
end sub

sub changeView(event as object)
    viewName = event.getData()
    if viewName = "_go_back_" then
        goBack()
    else
        showView(viewName, m.top.changeViewDataExtra)
    end if
end sub

sub goBack()
    ' TODO grab view from viewHistory and show it
    ' TODO "cache" views ? keep them in memory once rendered ?
    if m.viewHistory.count() > 0 then
        previousView = m.viewHistory.pop()

        if m.currentView <> invalid then
            m.top.removeChild(m.currentView)
            m.currentView = invalid
        end if 
        
        m.currentView = previousView
        m.top.appendChild(previousView)
        previousView.setFocus(true)
    else
        m.top.changeView = "HomeView"
    end if
end sub

function onKeyEvent(key as String, press as Boolean) as Boolean
    if key = "back" and press = true then
        if m.currentView <> invalid and m.currentView.id <> "HomeView" then
            goBack()
        end if
        return true
    end if 
end function

sub showMessage(event as Object)
    messageCategoryMap = {
        "1": "Gdpr",
        "2": "Ccpa"
    }

    m.message = event.getData()

    if m.message.messageMetadata <> invalid and type(m.message.messageMetadata.categoryId) = "roInt" then
        m.messageCategory = messageCategoryMap[m.message.messageMetadata.categoryId.ToStr()]

        m.privacyManagerViewTask = createObject("roSGNode", "PrivacyManagerView")
        m.userConsentNode = createObject("roSGNode", "UserConsent" + m.messageCategory)
        m.userConsentNode.userConsent = m.top.userConsent
        ' m.userConsentNode.privacyManagerViewTask = m.privacyManagerViewTask
        m.userConsentNode.messageId = m.message.messageMetadata.messageId
        m.privacyManagerViewTask.userConsentNode = m.userConsentNode

        showView("HomeView")
    else
        m.top.done = true
        m.top.error = "Invalid message JSON"
    endif
end sub

sub showView(viewName as String, viewDataExtra = invalid as Object)
    viewMap = {
        "HomeView": "HomeView",
        "CategoriesView": "CategoriesView",
        "CategoryDetailsView": "CategoryView",
        "PrivacyPolicyView": "PrivacyPolicyView",
        "VendorsView": "VendorsView",
        "VendorDetails": "VendorView"
    }

    if viewName = "HomeView" then
        ' reset history when we go back Home
        m.viewHistory = []
    else 
        ' add to History if we're going deeper
        m.viewHistory.push(m.currentView)
    end if

    if m.currentView <> invalid then
        m.top.removeChild(m.currentView)
        m.currentView = invalid
    end if 

    viewData = getViewData(viewName)
    if viewData <> invalid then
        print "showing view: " + viewName
        
        viewComponent = createViewComponent(viewMap[viewName] + m.messageCategory, viewMap[viewName], viewData, viewDataExtra)
        m.currentView = viewComponent
        m.top.appendChild(viewComponent)
        viewComponent.setFocus(true)
    else
        print "error showing: " + viewName
        m.top.done = true
        m.top.error = "Invalid message JSON"
    end if
end sub

function createViewComponent(componentName, viewId, viewData, viewDataExtra) as Object
    viewComponent = CreateObject("roSGNode", componentName)
    viewComponent.id = viewId

    ' this order is important for observers 
    ' (a viewDataExtra observer will have access to all of the before)
    viewComponent.privacyManagerViewTask = m.privacyManagerViewTask
    viewComponent.userConsentNode = m.userConsentNode
    viewComponent.message = m.message.message
    viewComponent.messageMetadata = m.message.messageMetadata
    viewComponent.view = viewData
    viewComponent.viewDataExtra = viewDataExtra

    return viewComponent
end function

function getViewData(view as String) as Object
    for each component in m.message.message.message_json.children
        if component.id = view
            return component
        end if
    end for

    return invalid
end function