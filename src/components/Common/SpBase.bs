import "pkg:/source/sourcepoint-sdk/Helpers.bs"

sub init()
    translationMap = {
        "screen-title": function(node, sWidth, sHeight) as Object
            return [(sWidth - node.boundingRect().width)/2, 0] 
        end function,
        "col-layout": [0, 50]
    }
    updateTranslations(m.top, translationMap)

    m.componentIdMap = {
        "AcceptAllButton" : "accept_all",
        "Body": "privacy_policy_body",
        "BackButton": "button_nav_back",
        "CategoriesDescriptionText": "text_category_description",
        "CategoriesSubDescriptionText": "text_category_sub_description",
        "HeaderText": "text_header",
        "LogoImage": "image_logo",
        "OnButton": "button_on",
        "OffButton": "button_off",
        "NavCategoriesButton": "button_nav_categories",
        "NavPrivacyPolicyButton": "button_nav_privacy_policy",
        "NavVendorsButton": "button_nav_vendors",
        "SaveButton": "save_and_exit",
    }
    m.components = {}
    ' m.navViewMap : maps nav button IDs to views they should link to
    ' m.componentIdMap : fills in m.components mapping JSON id to our IDs
    ' m.rightColFocus : what should focus in the right column when the right arrow is pressed
end sub

sub changeView(viewName as String, viewData = invalid as Object)
    spMessage = m.top.getParent()
    spMessage.changeViewDataExtra = viewData
    spMessage.changeView = viewName
end sub

' TODO cache responses 
sub getPrivacyManagerViewData(callbackFn)
    m.pmvCallback = callbackFn
    if m.privacyManagerViewData = invalid then
        m.privacyManagerViewTask = createObject("roSGNode", "PrivacyManagerView")
        m.privacyManagerViewTask.messageCategory = 2
        m.privacyManagerViewTask.propertyId = m.global.config.propertyId
        m.privacyManagerViewTask.control = "RUN"
        m.privacyManagerViewTask.observeField("state", "setCategoryData")
    else
        m.pmvCallback()
    end if
end sub

sub mapComponents(view as object)
    if m.componentIdMap <> invalid then
        for each component in view.components
            if m.componentIdMap[component.id] <> invalid then
                m.components[m.componentIdMap[component.id]] = component
            end if
        end for
    end if
end sub

' TODO - add logic to handle "choice action" buttons
sub observeNav(event as Object)
    selectedButton = m.nav.getChild(event.getData())

    if m.navViewMap <> invalid and m.navViewMap[selectedButton.id] <> invalid then
        changeView(m.navViewMap[selectedButton.id])
    end if
end sub

function onKeyEvent(key as String, press as Boolean) as Boolean
    if key = "left" and press = true and m.nav <> invalid then
        m.nav.setFocus(true)
        return true
    else if key = "right" and press = true and m.rightColFocus <> invalid then
        m.rightColFocus.setFocus(true)
    end if 

    return false
end function

sub renderLogo()
    if m.components.text_header <> invalid then
        m.top.findNode("screen-title").text = m.components.text_header.text
    end if

    if m.components.image_logo <> invalid then
        component = createObject("roSGNode", "Poster")
        component.id = "image_logo"
        ' component.uri = m.components.image_logo.src
        component.uri = "https://media-exp1.licdn.com/dms/image/C4E0BAQFSFMjK4tO6Ow/company-logo_200_200/0/1568325424638?e=2159024400&v=beta&t=BKtCl52Mz2EsyJeOP6zGmLURWT1aez1cJhKKiI9MzYU"

        if m.components.image_logo.style.width <> invalid then
            component.loadWidth = m.components.image_logo.style.width
        end if 

        m.colLeft.appendChild(component)
    end if
end sub

sub renderNav(buttonIds)
    buttonGroup = createObject("roSGNode", "ButtonGroup")

    for each buttonId in buttonIds
        if m.components[buttonId] <> invalid then
            button = createObject("roSGNode", "Button")
            button.id = buttonId
            button.text = m.components[buttonId].text
            buttonGroup.appendChild(button)
        end if
    endfor

    m.colLeft.appendChild(buttonGroup)
    m.nav = buttonGroup
    m.nav.observeField("buttonSelected", "observeNav")
end sub

sub setCategoryData(event as Object)
    eventStatus = event.getData()

    if eventStatus = "stop" or eventStatus = "done" then
        m.privacyManagerViewData = m.privacyManagerViewTask.data

        if m.pmvCallback <> invalid then
            m.pmvCallback()
        end if
    end if
end sub