import "pkg:/source/sourcepoint-sdk/Helpers.bs"

sub init()
    leftRightPadding = 180
    usableWidth = scalePixelDimension(1280 - leftRightPadding)
    m.colLeftWidth = usableWidth / 2
    m.colRightWidth = usableWidth / 2
    
    translationMap = {
        "col-left-width-holder": [0,0,m.colLeftWidth,0],
        "col-right-width-holder": [0,0,m.colRightWidth,0],
        "screen-title": [usableWidth/2, 0],
        ' "screen-title": function(node, sWidth, sHeight) as Object
        '     return [1180/2, 0] 
        ' end function,
        "col-layout": [0, 50]
    }
    scalePixelDimensions(m.top, translationMap)

    m.componentIdMap = {
        "AcceptAllButton" : "accept_all",
        "Body": "privacy_policy_body",
        "BackButton": "button_nav_back",
        "CategoriesDescriptionText": "text_category_description",
        "CategoriesSubDescriptionText": "text_category_sub_description",
        "CategoryButton": "button_category",
        "DoNotSellButton": "button_do_not_sell",
        "Header": "text_header",
        "LogoImage": "image_logo",
        "OnButton": "button_on",
        "OffButton": "button_off",
        "NavCategoriesButton": "button_nav_categories",
        "NavPrivacyPolicyButton": "button_nav_privacy_policy",
        "NavVendorsButton": "button_nav_vendors",
        "PublisherDescription": "text_publisher_description",
        "PurposesHeader": "text_purposes_header"
        "SaveButton": "save_and_exit",
        "VendorButton": "button_vendor",
        "VendorsHeader": "text_vendor_header",
        "VendorLongButton": "button_vendor",
    }
    m.components = {}
    ' m.navViewMap : maps nav button IDs to views they should link to
    ' m.componentIdMap : fills in m.components mapping JSON id to our IDs
    ' m.rightColFocus : what should focus in the right column when the right arrow is pressed

    m.top.translation=[scalePixelDimension(leftRightPadding/2), 50]

    m.top.observeField("focusedChild", "trackFocusedChild")
end sub

sub changeView(viewName as String, viewData = invalid as Object)
    spMessage = m.top.getParent()
    spMessage.changeViewDataExtra = viewData
    spMessage.changeView = viewName
end sub

sub getPrivacyManagerViewData(messageCategoryId)
    if m.privacyManagerViewTask = invalid then
        ' if we haven't created the task create it and run it
        m.privacyManagerViewTask = m.top.privacyManagerViewTask
        m.privacyManagerViewTask.messageCategory = messageCategoryId
        m.privacyManagerViewTask.propertyId = m.global.config.propertyId
        m.privacyManagerViewTask.control = "RUN"
        m.privacyManagerViewTask.observeField("state", "setPmvData")
        m.privacyManagerViewTask.observeField("data", "setPmvData")
    else
        ' else we already have the data, another view is asking for it
        setPmvData()
    end if
end sub

sub mapComponents(view as object)
    m.components.view = view
    if m.componentIdMap <> invalid then
        for each component in view.children
            if m.componentIdMap[component.id] <> invalid then
                m.components[m.componentIdMap[component.id]] = component
            end if
        end for
    end if
end sub

sub observeNav(event as Object)
    selectedButton = m.nav.getChild(event.getData())

    if m.navViewMap <> invalid and m.navViewMap[selectedButton.id] <> invalid then
        changeView(m.navViewMap[selectedButton.id])
    else if selectedButton.id = "button_nav_back" then
        changeView("_go_back_")
    else
        consentTask = createObject("roSGNode", "ConsentTask")
        consentTask.messageCategory = m.top.messageMetadata.categoryId

        if selectedButton.id = "accept_all" then
            consentTask.action = "accept"
        else if selectedButton.id = "reject_all" then
            consentTask.action = "reject"
        else if selectedButton.id = "save_and_exit" then
            if m.top.messageMetadata.categoryId = 2 then
                ' for ccpa look at do not sell
                ' we can remove this logic if we want to allow toggline of categories and vendors
                if m.top.userConsentNode.doNotSell = true then
                    consentTask.action = "reject"
                else
                    consentTask.action = "accept"
                end if
            else
                ' for gdpr get save and exit vars
                consentTask.action = "save_and_exit"
                consentTask.saveAndExitVariables = m.top.userConsentNode.callFunc("getSaveAndExitVariables")
            end if
        end if 

        consentTask.control = "RUN"
        consentTask.observeField("userConsent", "setConsent")
    end if
end sub

function onKeyEvent(key as String, press as Boolean) as Boolean
    if key = "left" and press = true and m.nav <> invalid then
        m.nav.setFocus(true)
        m.previouslyFocusedChild = m.nav
        return true
    else if key = "right" and press = true and m.rightColFocus <> invalid then
        m.rightColFocus.setFocus(true)
        m.previouslyFocusedChild = m.rightColFocus
        return true
    end if 

    return false
end function

sub renderBase()
    if m.components.view.settings.style.backgroundColor <> invalid then
        spScene = m.top.getScene()
        spScene.backgroundUri = ""
        spScene.backgroundColor = colorConvert(m.components.view.settings.style.backgroundColor)
    end if 
end sub

sub renderLogo()
    renderBase()

    if m.components.text_header <> invalid then
        m.top.findNode("screen-title").settings = m.components.text_header.settings
        m.top.findNode("screen-title").textComponent.horizOrigin = "center"
    end if

    if m.components.image_logo <> invalid then
        component = createObject("roSGNode", "Poster")
        component.id = "image_logo"

        if m.components.image_logo.settings.style.width <> invalid then
            component.loadDisplayMode = "limitSize"
            component.loadWidth = m.components.image_logo.settings.style.width
            component.loadHeight = 540
        end if 

        component.uri = m.components.image_logo.settings.src
        ' TODO - set this to something for loading
        ' component.loadingBitmapUri = 
        m.colLeft.appendChild(component)
    end if
end sub

sub renderNav(buttonIds)
    buttons = []
    for each buttonId in buttonIds
        if m.components[buttonId] <> invalid then
            button = m.components[buttonId]
            button.id = buttonId
            buttons.push(button)
        end if
    end for

    buttonGroup = createObject("roSGNode", "SpButtonGroup")
    buttonGroup.buttonComponents = buttons

    m.colLeft.appendChild(buttonGroup)
    m.nav = buttonGroup
    m.nav.observeField("buttonSelected", "observeNav")
    m.previouslyFocusedChild = m.nav
end sub

sub setPmvData(event = invalid as Object)
    if event = invalid or m.privacyManagerViewTask.state = "stop" then
        m.top.privacyManagerViewData = m.privacyManagerViewTask.data
    end if
end sub

sub setConsent(event as Object)
    spMessage = m.top.getParent()
    spMessage.userConsent = event.getData()
    spMessage.done = true
end sub

' Focus previously focused element if this view was just focused
sub trackFocusedChild(event as Object)
    focusedChild = event.getData()

    if focusedChild <> invalid and m.previouslyFocusedChild <> invalid then
        if m.top.hasFocus() = true then
            m.previouslyFocusedChild.setFocus(true)
        end if
    end if
end sub