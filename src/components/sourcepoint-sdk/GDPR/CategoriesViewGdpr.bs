sub init()
    m.top.observeField("view", "renderView")
    m.top.observeField("privacyManagerViewData", "renderRightCol")

    m.categoryLists = {}
end sub

sub changeCategories(event as Object)
    print "change categories:"
    print event.getData()
end sub

sub observeCategoryList(event as Object)
    item = m.categoryList.focusedContentNode

    cType = "categories"
    section = item.getParent()
    if section <> invalid and section.album <> invalid then
        cType = section.album
    end if

    viewData = {"categoryType": cType}
    viewData.append(m.top.privacyManagerViewData.[cType][item.id])

    changeView("CategoryDetailsView", viewData)
end sub

function onKeyEvent(key as String, press as Boolean) as Boolean
    if key = "up" and m.nav.isInFocusChain() = true then 
        m.categorySlider.setFocus(true)
        return true
    else if key = "down" and m.categorySlider.isInFocusChain() = true then
        m.nav.setFocus(true)
        return true
    end if 

    return _onKeyEvent(key, press)
end function

sub renderCategoryDescription()
    if m.categoryDescription = invalid then
        m.categoryDescription = createObject("roSGNode", "SpNativeText")
        m.categoryDescription.settings = m.components.text_category_description.settings
        m.categoryDescription.textComponent.wrap = true
    end if
end sub

sub renderRightCol()
    categoryTypes = {
        "categories": {
            headerComponent: m.components.text_purposes_header,
            defComponent: m.components.text_purposes_def
        }, 
        "specialPurposes": {
            headerComponent: m.components.text_special_purposes_header,
            defComponent: m.components.text_special_purposes_def
        }, 
        "specialFeatures": {
            headerComponent: m.components.text_features_header,
            defComponent: m.components.text_features_def
        }
    }

    categoryTypeOrder = ["categories", "specialPurposes", "specialFeatures"]

    sections = []
    sectionsLi = []

    for each cType in categoryTypeOrder
        buttons = []
        buttonsLi = []
        for each id in m.top.privacyManagerViewData[cType]
            listItem = m.top.privacyManagerViewData[cType][id]

            if (listItem.vendors <> invalid and listItem.vendors.count() > 0) or (listItem.requiringConsentVendors <> invalid and listItem.requiringConsentVendors.count() > 0) then
                buttonSettings = { 
                    on: m.top.privacyManagerViewData[cType][id]["__enabled"]
                    settings: {} 
                } 
                buttonSettings.settings.append(m.components.button_category.settings)
                buttonSettings.id = id
                buttonSettings.settings.text = m.top.privacyManagerViewData[cType][id].name
        
                buttons.push(buttonSettings)
            end if
        end for
    
        if buttons.count() > 0 then
            section = {
                children: buttons,
                settings: categoryTypes[cType].headerComponent.settings,
                "type": cType
            }

            sections.push(section)
        end if
    end for
    
    if m.categoryList = invalid then
        m.categoryList = createObject("roSGNode", "SpHeaderButtonList")
        m.categoryList.width = m.colRightWidth

        m.colRight.appendChild(m.categoryList)
        m.rightColFocus = m.categoryList
        m.categoryList.observeField("itemSelected", "observeCategoryList")
        if m.components.text_purposes_header <> invalid then
            m.categoryList.sectionSettings = m.components.text_purposes_header.settings
        end if

        m.categoryLists["left"] = m.categoryList
    end if 

    m.categoryList.buttonComponents = sections
end sub

sub renderSlider()
    if m.categorySlider = invalid then
        categorySlider = createObject("roSGNode", "SpSlider")
        categorySlider.settings = m.components.slider_categories.settings
        titleHolder = m.top.findNode("title-holder")
        titleHolder.appendChild(categorySlider)
        m.categorySlider = categorySlider
        m.categorySlider.observeField("buttonSelected", "changeCategories")
    end if
end sub

sub renderView(event as Object)
    getPrivacyManagerViewData(1)
    m.colLeft = m.top.findNode("col-left")
    m.colRight = m.top.findNode("col-right")

    view = event.getData()
    mapComponents(view)

    renderLogo()
    renderCategoryDescription()
    renderNav(["save_and_exit"])
    renderSlider()

    ' TODO add loader to the right col until it is rendered

    m.nav.setFocus(true)
end sub