sub init()
    m.top.observeField("view", "renderView")
    m.top.observeField("privacyManagerViewData", "renderRightCol")
end sub

sub observeCategoryList(event as Object)
    item = m.categoryList.content.getChild(event.getData())

    changeView("CategoryDetailsView", m.top.privacyManagerViewData.categories[item.id])
end sub

sub renderCategoryDescription()
    if m.categoryDescription = invalid then
        m.categoryDescription = createObject("roSGNode", "SpNativeText")
        m.categoryDescription.settings = m.components.text_category_description.settings
        m.categoryDescription.textComponent.wrap = true
    end if
end sub

sub renderRightCol()
    print "render right col"
    categoryTypes = {
        "categories": {
            headerComponent: m.components.text_purposes_header,
            defComponent: m.components.text_purposes_def
        }, 
        "specialPurposes": {
            headerComponent: m.components.text_special_purposes_header,
            defComponent: m.components.text_special_purposes_def
        }, 
        "specialFeatures": {
            headerComponent: m.components.text_features_header,
            defComponent: m.components.text_features_def
        }
    }

    sections = []

    for each cType in categoryTypes
        buttons = []
        for each id in m.top.privacyManagerViewData[cType]
            buttonSettings = { 
                on: m.top.privacyManagerViewData[cType][id]["__enabled"]
                settings: {} 
            } 
            buttonSettings.settings.append(m.components.button_category.settings)
            buttonSettings.id = id
            buttonSettings.settings.text = m.top.privacyManagerViewData[cType][id].name

            print "bloop:"
            print cType
            print m.top.privacyManagerViewData[cType][id].name
    
            buttons.push(buttonSettings)
        end for
    
        if buttons.count() > 0 then
            section = {
                children: buttons,
                settings: categoryTypes[cType].headerComponent.settings
            }

            sections.push(section)
        end if
    end for
    
    if m.categoryList = invalid then
        m.categoryList = createObject("roSGNode", "SpButtonList")
        m.categoryList.width = m.colRightWidth

        m.colRight.appendChild(m.categoryList)
        m.rightColFocus = m.categoryList
        m.categoryList.observeField("itemSelected", "observeCategoryList")
        if m.components.text_purposes_header <> invalid then
            m.categoryList.sectionSettings = m.components.text_purposes_header.settings
        end if
    end if 

    m.categoryList.buttonComponents = sections
end sub

sub renderView(event as Object)
    getPrivacyManagerViewData(1)
    m.colLeft = m.top.findNode("col-left")
    m.colRight = m.top.findNode("col-right")

    view = event.getData()
    mapComponents(view)

    renderLogo()
    renderCategoryDescription()
    renderNav(["save_and_exit"])

    ' TODO add loader to the right col until it is rendered

    m.nav.setFocus(true)
end sub