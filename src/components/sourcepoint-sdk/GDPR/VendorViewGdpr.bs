import "pkg:/source/sourcepoint-sdk/Helpers.bs"

sub init()
    m.top.observeField("viewDataExtra", "renderView")

    m.navButtons = ["button_on", "button_off"]
    m.rightColTabs = []
    m.currentRightColTab = 0
end sub

sub observeNav(event as Object)
    selectedButton = m.nav.getChild(event.getData())

    if selectedButton <> invalid then
        if selectedButton.id = "button_on" then
            m.top.userConsentNode.acceptVendor = m.vendorData.vendorId
        else if selectedButton.id = "button_off" then
            m.top.userConsentNode.rejectVendor = m.vendorData.vendorId
        end if 
    end if

    changeView("_go_back_")
end sub

function onKeyEvent(key as String, press as Boolean) as Boolean
    if m.rightColFocus <> invalid and m.rightColFocus.isInFocusChain() then
        if key = "right" and (m.currentRightColTab + 1) < m.rightColTabs.count() then
            if press = true then
                m.currentRightColTab = m.currentRightColTab + 1
                for i=0 to m.rightColTabs.count()-1 step 1
                    if i = m.currentRightColTab then 
                        m.rightColTabs[i].visible = true
                        m.rightColFocus = m.rightColTabs[i] 
                        m.rightColFocus.setFocus(true)
                    else 
                        m.rightColTabs[i].visible = false
                    end if
                end for
            end if
            return true
        end if
        if key = "left" and m.currentRightColTab > 0 then
            if press = true then
                m.currentRightColTab = m.currentRightColTab - 1
                for i=0 to m.rightColTabs.count()-1 step 1
                    if i = m.currentRightColTab then 
                        m.rightColTabs[i].visible = true
                        m.rightColFocus = m.rightColTabs[i] 
                        m.rightColFocus.setFocus(true)
                    else 
                        m.rightColTabs[i].visible = false
                    end if
                end for
            end if
            return true
        end if
    end if

    return _onKeyEvent(key, press)
end function

sub renderPrivacyPolicyUrl(url, title as String, element_id as String)
    if url = invalid then
        return
    end if
    
    font = createFont({fontSize: 12})
    screenTitle = m.screenTitle

    textColor = "0x000000FF"
    if screenTitle <> invalid then
        textColor = screenTitle.textComponent.color
    end if

    ppHeader = createObject("roSGNode", "SimpleLabel")
    ppHeader.text = title
    ppHeader.color = textColor

    ppUrl = createObject("roSGNode", "Label")
    ppUrl.id = element_id
    ppUrl.text = url
    ppUrl.wrap = true
    ppUrl.color = textColor
    ppUrl.width = m.colLeftWidth * .8
    ppUrl.font = font

    m.colLeft.appendChild(ppHeader)
    m.colLeft.appendChild(ppUrl)
end sub

sub renderRightCol()
    m.screenTitle.text = m.vendorData.name

    for i = 0 to m.navButtons.count() step 1 
        if (m.vendorData.enabled = true and m.navButtons[i] = "button_on") or (m.vendorData.enabled = false and m.navButtons[i] = "button_off") then
            m.nav.focusButton = i
            exit for
        end if
    end for
    setFocus(m.nav)

    renderTabs()

    m.tabContentTarget = createObject("roSGNode", "Group")
    m.colRight.appendChild(m.tabContentTarget)

    categories = []
    if m.vendorData.isLi = true then
        categories = m.vendorData.legIntCategories
    else
        if m.vendorData.consentCategories <> invalid then 
            categories.append(m.vendorData.consentCategories)
        end if
        if m.vendorData.disclosureOnlyCategories <> invalid then
            categories.append(m.vendorData.disclosureOnlyCategories)
        end if
    end if

    if categories <> invalid and categories.count() > 0 then
        m.categoryList = createObject("roSGNode", "SpButtonList")
        m.categoryList.id = "category_list"
        m.categoryList.width = m.colRightWidth
        buttons = []
        for each purpose in categories
            if purpose <> invalid then
                buttonSettings = { 
                    carat: "",
                    settings: {} 
                } 
                if m.components.button_vendor <> invalid then
                    buttonSettings.settings.append(m.components.button_vendor.settings)
                end if
                buttonSettings.settings.text = purpose.name

                buttons.push(buttonSettings)
            end if
        end for
        m.categoryList.buttonComponents = buttons

        if buttons.count() > 0 then
            m.tabContentTarget.appendChild(m.categoryList)
            m.rightColFocus = m.categoryList
            m.rightColTabs.push(m.categoryList)
        end if
    end if

    if m.vendorData.iabDataCategories <> invalid then
        collectedData = createObject("roSGNode", "SpNativeText")
        collectedData.visible = false
        collectedData.componentName = "ScrollableText"
        collectedDataText = ""

        if m.components.text_data_categories_list_header <> invalid and m.components.text_data_categories_list_header.settings <> invalid then
            collectedDataText = m.components.text_data_categories_list_header.settings.text + chr(10) + chr(10)
        endif

        for each category in m.vendorData.iabDataCategories
            collectedDataText = collectedDataText + category.name + chr(10) + chr(10) + category.description + chr(10) + chr(10)
        end for
        ' TODO - add text to actual settings
        collectedData.settings = {
            text: collectedDataText
        }
        collectedData.textComponent.width = m.colRightWidth
        collectedData.textComponent.height = scalePixelDimension(530)
        m.tabContentTarget.appendChild(collectedData)
        m.rightColTabs.push(collectedData)
    end if
end sub

sub renderTabs()
    m.tabTarget = createObject("roSGNode", "LayoutGroup")
    m.tabTarget.layoutDirection = "horiz"
    m.tabTarget.itemSpacings = [scalePixelDimension(10)]
    m.colRight.appendChild(m.tabTarget)

    if m.components.text_purposes_header_text <> invalid then
        purposesHeader = createObject("roSGNode", "SpNativeText")
        purposesHeader.settings = m.components.text_purposes_header_text.settings
        m.tabTarget.appendChild(purposesHeader)
    endif
    if m.components.text_data_categories_header <> invalid then
        purposesHeader = createObject("roSGNode", "SpNativeText")
        purposesHeader.settings = m.components.text_data_categories_header.settings
        m.tabTarget.appendChild(purposesHeader)
    endif
end sub

function isDisclosureOnly() as boolean
    if m.vendorData = invalid then
        ' no vendor data
        return false
    else if m.vendorData.disclosureOnlyCategories = invalid or m.vendorData.disclosureOnlyCategories.count() = 0 then
        ' no disclosure only categories
        return false
    else 
        ' has disclosure only categories, make sure it has no toggleable types
        ret = true
        keys = ["consentCategories", "legIntCategories", "iabSpecialFeatures"]
        for each key in keys 
            if m.vendorData[key] = invalid or m.vendorData[key].count() > 0 then
                ret = false
                exit for
            end if
        end for

        return ret
    end if
end function

sub renderView(event as Object)
    m.vendorData = event.getData()

    if isDisclosureOnly() then
        m.navButtons = []
    end if
    
    view = m.top.view
    mapComponents(view)

    renderHeader()
    renderPrivacyPolicyUrl(m.vendorData.policyUrl, "Privacy Policy Url:", "privacy_policy_url")
    renderPrivacyPolicyUrl(m.vendorData.legIntUrl, "Legitimate Interest Disclosure:", "legint_url")
    renderNav(m.navButtons)

    renderRightCol()
end sub