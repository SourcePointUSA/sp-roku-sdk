sub init()
    m.top.observeField("view", "renderView")
    m.top.observeField("viewDataExtra", "renderRightCol")
    m.navButtons = ["button_on", "button_off"]

    m.descriptionScrollPoster = invalid
end sub

sub observeNav(event as Object)
    selectedButton = m.nav.getChild(event.getData())

    categoryActionMap = {
        "categories": {
            accept: "acceptCategory",
            reject: "rejectCategory"
        },
        "legInt": {
            accept: "acceptLiCategory",
            reject: "rejectLiCategory"
        }
    }

    categoryType = m.categoryData.categoryType

    if selectedButton.id = "button_on" then
        m.top.userConsentNode[categoryActionMap[categoryType]["accept"]] = m.categoryData._id
    else if selectedButton.id = "button_off" then
        m.top.userConsentNode[categoryActionMap[categoryType]["reject"]] = m.categoryData._id
    end if 

    changeView("_go_back_")
end sub

sub renderRightCol(event as Object)
    m.categoryData = event.getData()

    ' Show back button if it's not a toggle-able category
    if m.categoryData.categoryType <> "categories" and m.categoryData.categoryType <> "legInt" then
        renderNav(["button_nav_back"])
    else
        renderNav(m.navButtons)
    end if

    enabled = m.categoryData.enabled

    for i = 0 to m.navButtons.count() step 1 
        if (enabled = true and m.navButtons[i] = "button_on") or (enabled = false and m.navButtons[i] = "button_off") then
            m.nav.focusButton = i
            exit for
        end if
    end for

    setFocus(m.nav)
    m.top.findNode("screen-title").text = m.categoryData.name

    if m.categoryData.description <> invalid then
        description = createObject("roSGNode", "SpNativeText")
        description.componentName = "ScrollableText"
        settings = {}
        settings.append(m.components.text_category_description.settings)
        settings.text = m.categoryData.description
        description.settings = settings
        description.textComponent.height = 250
        description.textComponent.width = m.colRightWidth
        
        m.colRight.appendChild(description)

        ' find a scrollbar poster so we can determine if the element scrolls
        scrollTextChildren = description.textComponent.getChildren(-1, 0)
        for each c in scrollTextChildren
            if c.subType() = "Poster" then
                m.descriptionScrollPoster = c
                exit for
            end if
        end for

        m.description = description.textComponent
    end if

    ' figure out which type of vendor this is
    if m.categoryData.categoryType = "categories" then
        vendors = m.categoryData.requiringConsentVendors
    else if m.categoryData.categoryType = "legInt" then
        vendors = m.categoryData.legIntVendors
    else
        vendors = m.categoryData.vendors
    end if

    ' render vendor header with count
    if m.components.text_vendor_header <> invalid then
        vendorsHeader = createObject("roSGNode", "SpNativeText")
        settings = {}
        settings.append(m.components.text_vendor_header.settings)
        settings.text = settings.text + " (" + vendors.count().toStr() + ")"
        vendorsHeader.settings = settings
        m.colRight.appendChild(vendorsHeader)
    end if

    ' render vendors
    buttons = []
    for each vendor in vendors
        buttonSettings = { 
            carat: "",
            settings: {} 
        } 
        buttonSettings.settings.append(m.components.button_vendor.settings)
        buttonSettings.id = vendor._id
        buttonSettings.settings.text = vendor.name

        buttons.push(buttonSettings)
    end for

    if buttons.count() > 0 then
        m.vendorList = createObject("roSGNode", "SpButtonList")
        m.vendorList.width = m.colRightWidth
        m.vendorList.buttonComponents = buttons

        m.colRight.appendChild(m.vendorList)
    end if
end sub

sub renderView(event as Object)
    m.colLeft = m.top.findNode("col-left")
    m.colRight = m.top.findNode("col-right")

    view = event.getData()
    mapComponents(view)

    renderLogo()

    ' TODO add loader to the right col until it is rendered
end sub

function onKeyEvent(key as String, press as Boolean) as Boolean
    if key = "left" and press = true and m.nav <> invalid then
        m.nav.setFocus(true)
        m.previouslyFocusedChild = m.nav
        return true
    else if key = "right" and press = true then
        ' for the right key, we first see if the category text is overflowing
        ' if it is we go there,
        ' if not we will go to the vendor list
        if m.descriptionScrollPoster.visible = true then
            m.description.setFocus(true)
            m.previouslyFocusedChild = m.description
            return true
        else if m.vendorList <> invalid
            m.vendorList.setFocus(true)
            m.previouslyFocusedChild = m.vendorList
            return true
        end if
    else if key = "down" and press = true and m.description.hasFocus() = true and m.vendorList <> invalid then
        ' for the down key, if we're in the category description we know we want to go to the partner list
        m.vendorList.setFocus(true)
        m.previouslyFocusedChild = m.vendorList
    end if 

    return false
end function