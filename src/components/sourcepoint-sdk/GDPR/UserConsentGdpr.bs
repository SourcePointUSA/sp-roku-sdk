sub init()
    m.top.observeField("acceptCategory", "acceptCategory")
    m.top.observeField("acceptLiCategory", "acceptLiCategory")
    m.top.observeField("acceptVendor", "acceptVendor")
    m.top.observeField("rejectCategory", "rejectCategory")
    m.top.observeField("rejectLiCategory", "rejectLiCategory")
    m.top.observeField("rejectVendor", "rejectVendor")

    m.legIntCategories = []
end sub

sub acceptCategory(event as Object)
    updatePmvConsent("categories", event.getData(), true)

    fireConsentChange()
end sub

sub acceptLiCategory(event as Object)
    updatePmvConsent("legIntCategories", event.getData(), true)

    fireConsentChange()
end sub

sub acceptVendor(event as Object)
    updatePmvConsent("vendors", event.getData(), true)

    fireConsentChange()
end sub

sub rejectCategory(event as Object)
    updatePmvConsent("categories", event.getData(), false)

    fireConsentChange()
end sub

sub rejectLiCategory(event as Object)
    updatePmvConsent("legIntCategories", event.getData(), false)

    fireConsentChange()
end sub

sub rejectVendor(event as Object)
    updatePmvConsent("vendors", event.getData(), false)

    fireConsentChange()
end sub

function addConsentToPmvData(privacyManagerViewData as Object) as Object
    ' this is a no-op for GDPR, "enabled" comes with the data
    ' we do want to ingest this data so we can update it
    if m.top.privacyManagerViewConsent = invalid then
        ingestConsent(privacyManagerViewData)
        return privacyManagerViewData
    else
        return m.top.privacyManagerViewConsent
    end if
end function

sub ingestConsent(privacyManagerViewData as Object)
    m.top.privacyManagerViewConsent = privacyManagerViewData
end sub

sub fireConsentChange()
    m.top.consentChanged = m.top.privacyManagerViewConsent
end sub

function getConsentedCategories() as Object
    consentedCategories = []

    if m.top.privacyManagerViewConsent <> invalid then 
        categories = m.top.privacyManagerViewConsent.categories
        legIntCategories = m.top.privacyManagerViewConsent.legIntCategories

        ' iterate through categories to find enabled cats
        for each categoryId in categories
            if categories[categoryId].enabled = true then
                consentedCat = {
                    consent: true,
                    legInt: false,
                    iabId: categories[categoryId].iabId,
                    "type": categories[categoryId]["type"],
                    "_id": categories[categoryId]["_id"]
                }

                ' if this category is also leg int enabled, say so
                if legIntCategories[categoryId] <> invalid and legIntCategories[categoryId].enabled = true then
                    consentedCat.legInt = true
                end if

                consentedCategories.push(consentedCat)
            end if
        end for

        ' iterate through leg int categories to find enabled cats
        for each categoryId in legIntCategories
            ' we already got all enabled categories
            ' we only missed disabled categories where leg int is enabled, so grab those
            if categories[categoryId].enabled = false and legIntCategories[categoryId].enabled = true then
                consentedCat = {
                    consent: false,
                    legInt: true,
                    iabId: legIntCategories[categoryId].iabId,
                    "type": legIntCategories[categoryId]["type"],
                    "_id": legIntCategories[categoryId]["_id"]
                }

                consentedCategories.push(consentedCat)
            end if
        end for
    end if 

    return consentedCategories
end function

function getConsentedVendors() as Object
    return []
end function

function getSaveAndExitVariables() as Object
    return {
        "lan": m.global.config.consentLanguage,
        "privacyManagerId": m.top.messageId.toStr(),
        "categories": getConsentedCategories(),
        "specialFeatures": [],  ' TODO - what is this?
        "vendors": getConsentedVendors()
    }
end function

sub updatePmvConsent(categoryType as String, categoryId as String, enabled as Boolean)
    pmvConsent = m.top.privacyManagerViewConsent
    if pmvConsent[categoryType] <> invalid and pmvConsent[categoryType][categoryId] <> invalid then
        pmvConsent[categoryType][categoryId].enabled = enabled
        m.top.privacyManagerViewConsent = pmvConsent
    end if
end sub