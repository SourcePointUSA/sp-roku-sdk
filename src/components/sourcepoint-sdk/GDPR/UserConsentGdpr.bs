sub init()
    m.top.observeField("acceptCategory", "acceptCategory")
    m.top.observeField("acceptLiCategory", "acceptLiCategory")
    m.top.observeField("acceptVendor", "acceptVendor")
    m.top.observeField("rejectCategory", "rejectCategory")
    m.top.observeField("rejectLiCategory", "rejectLiCategory")
    m.top.observeField("rejectVendor", "rejectVendor")

    m.acceptedCategories = []
    m.acceptedVendors = []
    m.legIntCategories = []
end sub

' TODO - do we need to update vendors that need this category?
sub acceptCategory(event as Object)
    updatePmvConsent("categories", event.getData(), true)

    fireConsentChange()
end sub

' TODO - update this to do the same as acceptCategory
sub acceptLiCategory(event as Object)
    updatePmvConsent("legIntCategories", event.getData(), true)

    fireConsentChange()
end sub

' TODO - update this to do the same as acceptCategory
sub acceptVendor(event as Object)
    updatePmvConsent("vendors", event.getData(), true)

    fireConsentChange()
end sub

' TODO - update this to do the same as acceptCategory
sub rejectCategory(event as Object)
    updatePmvConsent("categories", event.getData(), false)

    fireConsentChange()
end sub

' TODO - update this to do the same as acceptCategory
sub rejectLiCategory(event as Object)
    updatePmvConsent("legIntCategories", event.getData(), false)

    fireConsentChange()
end sub

' TODO - update this to do the same as acceptCategory
sub rejectVendor(event as Object)
    updatePmvConsent("vendors", event.getData(), false)

    fireConsentChange()
end sub

' TODO - update this to do the same as acceptCategory
function addConsentToPmvData(privacyManagerViewData as Object) as Object
    ' this is a no-op for GDPR, "enabled" comes with the data
    ' we do want to ingest this data so we can update it
    if m.top.privacyManagerViewConsent = invalid then
        ingestConsent(privacyManagerViewData)
        return privacyManagerViewData
    else
        return m.top.privacyManagerViewConsent
    end if
end function

sub ingestConsent(privacyManagerViewData as Object)
    m.top.privacyManagerViewConsent = privacyManagerViewData
end sub

sub fireConsentChange()
    m.top.consentChanged = m.top.privacyManagerViewConsent
end sub

function getConsentedCategories() as Object
    return []
end function

function getConsentedVendors() as Object
    return []
end function

function getSaveAndExitVariables() as Object
    return {
        "lan": m.global.config.consentLanguage,
        "privacyManagerId": m.top.messageId.toStr(),
        "categories": getConsentedCategories(),
        "specialFeatures": [],  ' TODO - what is this?
        "vendors": getConsentedVendors()
    }
end function

sub updatePmvConsent(categoryType as String, categoryId as String, enabled as Boolean)
    pmvConsent = m.top.privacyManagerViewConsent
    if pmvConsent[categoryType] <> invalid and pmvConsent[categoryType][categoryId] <> invalid then
        pmvConsent[categoryType][categoryId].enabled = enabled
        m.top.privacyManagerViewConsent = pmvConsent
    end if
end sub