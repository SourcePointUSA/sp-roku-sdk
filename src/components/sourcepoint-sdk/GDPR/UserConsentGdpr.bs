sub init()
    m.top.observeField("acceptCategory", "acceptCategory")
    m.top.observeField("acceptLiCategory", "acceptLiCategory")
    m.top.observeField("acceptVendor", "acceptVendor")
    m.top.observeField("rejectCategory", "rejectCategory")
    m.top.observeField("rejectLiCategory", "rejectLiCategory")
    m.top.observeField("rejectVendor", "rejectVendor")

    m.acceptedCategories = []
    m.acceptedVendors = []
    m.legIntCategories = []
end sub

' TODO - do we need to update vendors that need this category?
sub acceptCategory(event as Object)
    acceptedCategory = event.getData()

    pmvConsent = m.top.privacyManagerViewConsent
    if pmvConsent.categories <> invalid and pmvConsent.categories[acceptedCategory] <> invalid then
        pmvConsent.categories[acceptedCategory].enabled = true
        m.top.privacyManagerViewConsent = pmvConsent
    end if

    fireConsentChange()
end sub

' TODO - update this to do the same as acceptCategory
sub acceptLiCategory(event as Object)
    found = false
    acceptedLiCategory = event.getData()
    for each cat in m.legIntCategories
        if acceptedLiCategory = cat then
            found = true
        end if
    end for

    if found = false then
        m.legIntCategories.push(acceptedLiCategory)
    end if

    fireConsentChange()
end sub

' TODO - update this to do the same as acceptCategory
sub acceptVendor(event as Object)
    found = false
    acceptedVendor = event.getData()
    for each vendor in m.acceptedVendors
        if acceptedVendor = vendor then
            found = true
        end if
    end for

    if found = false then
        m.acceptedVendors.push(acceptedVendor)
    end if

    fireConsentChange()
end sub

' TODO - update this to do the same as acceptCategory
sub rejectCategory(event as Object)
    rejectedCategory = event.getData()
    for i = 0 to (m.acceptedCategories.count() - 1) step 1
        if m.acceptedCategories[i] = rejectedCategory then
            m.acceptedCategories.delete(i)
            exit for
        end if
    end for

    fireConsentChange()
end sub

' TODO - update this to do the same as acceptCategory
sub rejectLiCategory(event as Object)
    rejectedLiCategory = event.getData()
    for i = 0 to (m.legIntCategories.count() - 1) step 1
        if m.legIntCategories[i] = rejectedLiCategory then
            m.legIntCategories.delete(i)
            exit for
        end if
    end for

    fireConsentChange()
end sub

' TODO - update this to do the same as acceptCategory
sub rejectVendor(event as Object)
    rejectedVendor = event.getData()
    for i = 0 to (m.acceptedVendors.count() - 1) step 1
        if m.acceptedVendors[i] = rejectedVendor then
            m.acceptedVendors.delete(i)
            exit for
        end if
    end for

    fireConsentChange()
end sub

' TODO - update this to do the same as acceptCategory
function addConsentToPmvData(privacyManagerViewData as Object) as Object
    ' this is a no-op for GDPR, "enabled" comes with the data
    ' we do want to ingest this data so we can update it
    if m.top.privacyManagerViewConsent = invalid then
        ingestConsent(privacyManagerViewData)
        return privacyManagerViewData
    else
        return m.top.privacyManagerViewConsent
    end if
end function

sub ingestConsent(privacyManagerViewData as Object)
    m.top.privacyManagerViewConsent = privacyManagerViewData
end sub

sub fireConsentChange()
    m.top.consentChanged = m.top.privacyManagerViewConsent
end sub

function getConsentedCategories() as Object
    return []
end function

function getConsentedVendors() as Object
    return []
end function

function getSaveAndExitVariables() as Object
    return {
        "lan": m.global.config.consentLanguage,
        "privacyManagerId": m.top.messageId.toStr(),
        "categories": getConsentedCategories(),
        "specialFeatures": [],  ' TODO - what is this?
        "vendors": getConsentedVendors()
    }
end function