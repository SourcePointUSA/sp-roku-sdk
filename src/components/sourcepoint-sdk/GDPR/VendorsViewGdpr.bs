sub init()
    m.top.observeField("view", "renderView")
    m.top.observeField("privacyManagerViewData", "renderRightCol")

    m.vendorLists = {}
end sub

sub changeVendors(event as Object)
    buttonSide = event.getData()

    if buttonSide = "left" then
        m.vendorLists["right"].visible = false
        m.vendorLists["left"].visible = true

        m.rightColFocus = m.vendorLists["left"]
    else
        m.vendorLists["left"].visible = false
        m.vendorLists["right"].visible = true

        m.rightColFocus = m.vendorLists["right"]
    end if
end sub

sub observeVendorList(event as Object)
    showVendor(m.vendorList.focusedContentNode)
end sub

sub observeVendorListLi(event as Object)
    showVendor(m.vendorListLi.focusedContentNode, true)
end sub

sub showVendor(item as Object, isLi = false as Boolean)
    if item <> invalid then
        data = isLi = true ? m.top.privacyManagerViewData.legIntVendors[item.id] : m.top.privacyManagerViewData.vendors[item.id]
        changeView("VendorDetailsView", data)
    end if
end sub

function onKeyEvent(key as String, press as Boolean) as Boolean
    if key = "up" and m.nav.isInFocusChain() = true then 
        m.vendorSlider.setFocus(true)
        return true
    else if key = "down" and m.vendorSlider.isInFocusChain() = true then
        m.nav.setFocus(true)
        return true
    end if 

    return _onKeyEvent(key, press)
end function

sub renderRightCol()
    if m.vendorListTarget = invalid then
        m.vendorListTarget = createObject("roSGNode", "Group")
        m.colRight.appendChild(m.vendorListTarget)
    end if

    buttons = []
    for each vendorId in m.top.privacyManagerViewData.vendors
        buttonSettings = { 
            on: m.top.privacyManagerViewData.vendors[vendorId].enabled
            settings: {} 
        } 
        buttonSettings.settings.append(m.components.button_vendor.settings)
        buttonSettings.id = vendorId
        buttonSettings.settings.text = m.top.privacyManagerViewData.vendors[vendorId].name

        buttons.push(buttonSettings)
    end for

    if m.vendorList = invalid then
        m.vendorList = createObject("roSGNode", "SpButtonList")
        m.vendorList.width = m.colRightWidth
        
        m.vendorListTarget.appendChild(m.vendorList)
        m.rightColFocus = m.vendorList
        m.vendorLists["left"] = m.vendorList
        m.vendorList.observeField("itemSelected", "observeVendorList")
    end if

    m.vendorList.buttonComponents = buttons

    if m.top.privacyManagerViewData.legIntVendors <> invalid and m.top.privacyManagerViewData.legIntVendors.count() > 0 then
        buttonsLi = []
        for each vendorId in m.top.privacyManagerViewData.legIntVendors
            buttonSettings = { 
                on: m.top.privacyManagerViewData.legIntVendors[vendorId].enabled
                settings: {} 
            } 
            buttonSettings.settings.append(m.components.button_vendor.settings)
            buttonSettings.id = vendorId
            buttonSettings.settings.text = m.top.privacyManagerViewData.legIntVendors[vendorId].name

            buttonsLi.push(buttonSettings)
        end for

        if m.vendorListLi = invalid then
            m.vendorListLi = createObject("roSGNode", "SpButtonList")
            m.vendorListLi.width = m.colRightWidth
            
            m.vendorListTarget.appendChild(m.vendorListLi)
            m.vendorLists["right"] = m.vendorListLi
            m.vendorListLi.observeField("itemSelected", "observeVendorListLi")

            renderSlider()
        end if

        m.vendorListLi.buttonComponents = buttonsLi
    end if
end sub

sub renderSlider()
    if m.vendorSlider = invalid then
        vendorSlider = createObject("roSGNode", "SpSlider")
        vendorSlider.settings = m.components.slider_vendors.settings
        titleHolder = m.top.findNode("title-holder")
        titleHolder.appendChild(vendorSlider)
        m.vendorSlider = vendorSlider
        m.vendorSlider.observeField("buttonSelected", "changeVendors")
    end if
end sub

sub renderView(event as Object)
    getPrivacyManagerViewData(1)

    m.colLeft = m.top.findNode("col-left")
    m.colRight = m.top.findNode("col-right")

    view = event.getData()
    mapComponents(view)

    renderLogo()
    renderNav(["accept_all", "save_and_exit"])

    ' TODO add loader to the right col until it is rendered

    m.nav.setFocus(true)
end sub