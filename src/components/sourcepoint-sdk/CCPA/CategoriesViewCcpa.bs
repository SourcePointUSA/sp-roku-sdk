sub init()
    m.top.observeField("view", "renderView")
    m.top.observeField("privacyManagerViewData", "renderRightCol")
end sub

sub clearCategoryDesc(event as Object)
    focusedChild = event.getData()

    if focusedChild = invalid then
        updateCategoryDesc(invalid)
    end if
end sub

sub observeCategoryList(event as Object)
    item = m.categoryList.content.getChild(event.getData())

    changeView("CategoryDetailsView", m.top.privacyManagerViewData.categories[item.id])
end sub

sub observeCategoryListFocus(event as Object)
    updateCategoryDesc(m.categoryList.focusedContentNode)
end sub

sub updateCategoryDesc(listItem as Object)
    if listItem = invalid then
        text = ""
    else
        text = m.top.privacyManagerViewData.categories[listItem.id].description
    end if

    m.categoryDescription.text = text
end sub

sub renderCategoryDescription()
    if m.categoryDescription = invalid then
        m.categoryDescription = createObject("roSGNode", "SpNativeText")
        m.categoryDescription.settings = m.components.text_category_description.settings

        m.categoryDescription.textComponent.horizAlign = "center"
        m.categoryDescription.textComponent.wrap = true
        m.categoryDescription.textComponent.width = m.colLeftWidth * .8
        m.categoryDescription.textComponent.maxLines = 3
        m.colLeft.appendChild(m.categoryDescription)
    end if
end sub

sub renderRightCol()
    hideRightColLoader()

    if m.components.text_categories_header <> invalid then
        categoriesHeader = createObject("roSGNode", "SpNativeText")
        categoriesHeader.settings = m.components.text_categories_header.settings
        m.colRight.appendChild(categoriesHeader)
    end if

    if m.components.text_purposes_definition <> invalid then
        purposesDefinition = createObject("roSGNode", "SpNativeText")
        purposesDefinition.settings = m.components.text_purposes_definition.settings
        m.colRight.appendChild(purposesDefinition)
    end if

    buttons = []
    for each categoryId in m.top.privacyManagerViewData.categories
        buttonSettings = { 
            ' on: m.top.privacyManagerViewData.categories[categoryId].enabled
            settings: {} 
        } 
        buttonSettings.settings.append(m.components.button_category.settings)
        buttonSettings.id = categoryId
        buttonSettings.settings.text = m.top.privacyManagerViewData.categories[categoryId].name

        buttons.push(buttonSettings)
    end for

    if m.categoryList = invalid then
        m.categoryList = createObject("roSGNode", "SpButtonList")
        m.categoryList.width = m.colRightWidth

        m.colRight.appendChild(m.categoryList)
        m.rightColFocus = m.categoryList
        m.categoryList.observeField("itemSelected", "observeCategoryList")
        m.categoryList.observeField("itemFocused", "observeCategoryListFocus")
    end if 

    m.categoryList.buttonComponents = buttons
end sub

sub renderView(event as Object)
    hasPmvData = getPrivacyManagerViewData(2)

    if hasPmvData = false then
        renderRightColLoader()
    end if
    
    m.colLeft = m.top.findNode("col-left")
    m.colRight = m.top.findNode("col-right")

    view = event.getData()
    mapComponents(view)

    renderLogo()

    renderCategoryDescription()
    
    renderNav([])

    setFocus(m.back_button)
end sub