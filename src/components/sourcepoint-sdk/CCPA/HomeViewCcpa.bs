sub init()
    m.navViewMap = {
        "button_nav_categories": "CategoriesView",
        "button_nav_privacy_policy": "PrivacyPolicyView",
        "button_nav_vendors": "VendorsView"
    }

    m.top.observeField("view", "renderView")
end sub

sub renderView(event as Object)
    m.colLeft = m.top.findNode("col-left")
    m.colRight = m.top.findNode("col-right")

    view = event.getData()
    mapComponents(view)

    renderLogo()
    renderNav(["accept_all", "button_nav_categories", "button_nav_vendors", "button_nav_privacy_policy"])
    renderRightCol()

    m.nav.setFocus(true)
end sub

sub renderRightCol()
    description = createObject("roSGNode", "SpNativeText")
    description.settings = m.components.text_publisher_description.settings
    description.textComponent.wrap = true
    description.textComponent.width = m.colRightWidth
    
    m.colRight.appendChild(description)

    dnsButton = {
        carat: "",
        on: false,
        settings: {}
    }

    dnsButton.settings.append(m.components.button_do_not_sell.settings)
    dnsButton.settings.text = dnsButton.settings.dnsText

    if m.dnsButtonHolder = invalid then
        m.dnsButtonHolder = createObject("roSGNode", "SpButtonList")
        m.dnsButtonHolder.width = m.colRightWidth

        m.colRight.appendChild(m.dnsButtonHolder)
        m.rightColFocus = m.dnsButtonHolder
        m.dnsButtonHolder.observeField("itemSelected", "observeDns")
    end if 

    m.dnsButtonHolder.buttonComponents = [dnsButton]
end sub

sub observeDns(event as Object)
    print event.getData()
end sub