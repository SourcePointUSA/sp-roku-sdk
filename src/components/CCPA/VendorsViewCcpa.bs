sub init()
    m.navViewMap = {
        "accept_all": "HomeView",
        ' "save_and_exit": "HomeView",
    }

    m.top.observeField("view", "renderView")
end sub

sub observeVendorList(event as Object)
    index = event.getData()

    if index <> invalid then
        item = m.vendorList.buttonComponents[index]
        changeView("VendorDetailsView", m.privacyManagerViewData.vendors[item.id])
    end if
end sub

sub renderRightCol()
    m.vendorList = createObject("roSGNode", "SpButtonList")
    m.vendorList.width = m.colRightWidth - scalePixelDimension(50)

    buttons = []
    for each vendorId in m.privacyManagerViewData.vendors
        buttonSettings = { settings: {} } 
        buttonSettings.settings.append(m.components.button_vendor.settings)
        buttonSettings.id = vendorId
        buttonSettings.settings.text = m.privacyManagerViewData.vendors[vendorId].name

        buttons.push(buttonSettings)
    end for

    ' m.vendorList.buttonComponentName = "SpToggleButton"
    m.vendorList.buttonComponents = buttons

    m.colRight.appendChild(m.vendorList)
    m.rightColFocus = m.vendorList
    m.vendorList.observeField("itemSelected", "observeVendorList")
end sub

sub renderView(event as Object)
    getPrivacyManagerViewData(renderRightCol, 2)

    m.colLeft = m.top.findNode("col-left")
    m.colRight = m.top.findNode("col-right")

    view = event.getData()
    mapComponents(view)

    renderLogo()
    renderNav(["accept_all", "save_and_exit"])

    ' TODO add loader to the right col until it is rendered

    m.nav.setFocus(true)
end sub