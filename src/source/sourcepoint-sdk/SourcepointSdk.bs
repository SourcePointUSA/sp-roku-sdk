class SourcepointSdk
    private accountId
    private authId
    private env = "prod"
    private errors = []
    private campaignEnv = "prod"
    private consentLanguage
    private legislationsEnabled
    private propertyHref
    private propertyId
    private scene
    private screen

    private userConsent

    public constants = {
        baseEndpoint: "https://cdn.privacy-mgmt.com",
        pathGET: "/wrapper/v2/get_messages"
    }

    sub new(accountId as Integer, propertyHref as String, legislationsEnabled = {} as Object, optional = {} as Object, showMessages = true as boolean)
        m.accountId = accountId
        m.propertyHref = propertyHref
        m.legislationsEnabled = legislationsEnabled

        validOptionalProperties = [
            "authId",
            "campaignEnv",
            "consentLanguage"
        ]

        for each k in validOptionalProperties
            if optional[k] <> invalid then
                m[k] = optional[k]
            end if
        end for

        if optional.baseEndpoint <> invalid then m.constants.baseEndpoint = optional.baseEndpoint

        m.globalConfig = {
            "accountId": m.accountId,
            "authId": m.authId,
            "baseEndpoint" : m.constants.baseEndpoint,
            "consentLanguage" : m.consentLanguage,
            "env": m.env,
            "requestUUID": m.makeRequestUUID()
        }

        ' fetch messages and user consent, and messages
        if showMessages = true then
            m.getUserConsent()
        end if
    end sub

    private sub createScreen()
         ' create screen
         m.screen = CreateObject("roSGScreen")
         m.port = CreateObject("roMessagePort")
         m.screen.setMessagePort(m.port)
         m.scene = m.screen.CreateScene("SpScene")

         m.global = m.screen.getGlobalNode()
         m.global.addField("config", "assocarray", true)
         m.global.config = m.globalConfig
    end sub

    private sub closeScreen()
        m.screen.close()
    end sub

    private function formatUserConsent(userConsent as Object) as Object
        formattedConsent = {}
        if userConsent.gdpr <> invalid then
            if userConsent.gdpr["TCData"] <> invalid then
                formattedConsent.append(userConsent.gdpr["TCData"])
            endif

            formattedConsent["gdpr"] = {
                applies: m.applies.gdpr,
                consents: {
                    euconsent: userConsent.gdpr["euconsent"],
                    tcfData: userConsent.gdpr["TCData"],
                    vendorGrants: userConsent.gdpr["grants"]
                }
            }
        endif
        if userConsent.ccpa <> invalid then
            formattedConsent["IABUSPrivacy_String"] = userConsent.ccpa.uspstring

            formattedConsent["ccpa"] = {
                applies: m.applies.ccpa,
                consents: {
                    rejectedCategories: userConsent.ccpa["rejectedCategories"],
                    rejectedVendors: userConsent.ccpa["rejectedVendors"],
                    status: userConsent.ccpa["status"],
                    uspstring: userConsent.ccpa["uspstring"]
                }
            }
        endif

        return formattedConsent
    end function

    public function getErrors() as Object
        return m.errors
    end function

    public function getUserConsent() as Dynamic
        if m.userConsent <> invalid then
            return m.userConsent
        endif

        ' create screen before we make our task
        m.createScreen()

        getMessageTask = createObject("roSGNode", "GetMessages")
        getMessageTask.url = addQueryParams(m.constants.baseEndpoint + m.constants.pathGET, { "env": m.env, "consentLanguage": m.consentLanguage })
        getMessageTask.clientMMSOrigin = m.constants.baseEndpoint

        taskKeys = ["accountId", "authId", "campaignEnv", "consentLanguage", "legislationsEnabled", "propertyHref", "pubData", "requestUUID"]

        for each k in taskKeys
            getMessageTask[k] = m[k]
        end for

        getMessageTask.localState = getLocalState()
        getMessageTask.control = "RUN"

        port = CreateObject("roMessagePort")

        getMessageTask.observeFieldScoped("state", port)

        while true
            msg = wait(1000, port)
            if type(msg) = "roSGNodeEvent" and msg.getField() = "state" and msg.getData() = "stop" then
                if getMessageTask.error <> "" then
                    m.errors.push(getMessageTask.error)
                    return invalid
                end if

                m.applies = getMessageTask.applies
                m.userConsent = getMessageTask.userConsent
                m.setPropertyId(getMessageTask.propertyId)
                exit while
            end if
        end while

        getMessageTask.unobserveFieldScoped("state")

        ' always call show messages, it will show or close our screen
        m.showMessages(getMessageTask.campaigns)
        
        return m.formatUserConsent(m.userConsent)
    end function

    public sub openPrivacyManager(legislation as string, messageId as integer) as Dynamic
        ' make sure we're lowercase
        legislation = LCase(legislation)
        
        if m.userConsent = invalid then
            throw "Run the campaign(s) by calling getUserConsent() before calling openPrivacyManager()"
        end if
        if m.userConsent[legislation] = invalid then
            throw "Run the campaign of type '" + legislation + "' before opening the PM"
        end if

        ' create screen before we make our task
        m.createScreen()

        port = CreateObject("roMessagePort")

        getMessageTask = createObject("roSGNode", "GetMessage")
        getMessageTask.legislation = legislation
        getMessageTask.messageId = messageId
        getMessageTask.observeFieldScoped("state", port)

        getMessageTask.control = "RUN"

        while true
            msg = wait(1000, port)
            if type(msg) = "roSGNodeEvent" and msg.getField() = "state" and msg.getData() = "stop" then
                message = getMessageTask.message
                ' set user consent if we have it (which we should)
                if message <> invalid 
                    if m.userConsent <> invalid and m.userConsent[legislation] <> invalid then
                        message.userConsent = m.userConsent[legislation]
                    end if
                    m.showMessages([message])
                else
                    ' close screen
                    m.showMessages([])
                end if
                exit while
            end if
        end while

        getMessageTask.unobserveFieldScoped("state")

        return m.formatUserConsent(m.userConsent)
    end sub

    private function makeRequestUUID() as string
        di = CreateObject("roDeviceInfo")
        return di.getRandomUUID()
    end function

    public function runCampaignLogic(legislationsEnabled = invalid as Object)
        m.userConsent = invalid
        if legislationsEnabled <> invalid then
            m.legislationsEnabled = legislationsEnabled
        end if

        return m.getUserConsent()
    end function

    private sub showMessages(campaigns as Object)
        ' close screen and return if we have no messages
        if campaigns = invalid or campaigns.Count() = 0 then
            m.closeScreen()
            return
        end if

        m.scene.campaigns = campaigns

        m.screen.show()
        m.scene.observeFieldScoped("userConsent", m.port)

        while(true)
            msg = wait(0, m.port)
            msgType = type(msg)

            if msgType = "roSGNodeEvent" and msg.getField() = "userConsent" then
                m.userConsent = msg.getData()
                m.errors = m.scene.errors
                m.screen.close()
            end if

            if msgType = "roSGScreenEvent"
            if msg.isScreenClosed() then return
            end if
        end while
    end sub

    private sub setPropertyId(propertyId as Integer)
        m.propertyId = propertyId
        m.globalConfig.propertyId = propertyId
        
        ' update global config if it has been created
        if m.global.config <> invalid then
            m.global.config = m.globalConfig
        end if
    end sub
end class