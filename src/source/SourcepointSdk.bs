class SourcepointSdk
    private accountId
    private env = "stage"
    private campaignEnv = "prod"
    private consentLanguage
    private legislationsEnabled
    private propertyHref    'TODO : is this what we should use? 
    private registry
    private scene
    private screen
    private sdkPath = "sourcepoint-sdk"

    private userConsent

    public constants = {
        baseEndpoint: "https://cdn.privacy-mgmt.com",
        pathGET: "/wrapper/v2/get_messages",
        pathPOST: "/"
    }

    ' TODO - leglisations enabled should allow for extra configs
    sub new(accountId as Integer, propertyHref as String, legislationsEnabled = [] as Object, optional = {} as Object)
        ' create screen to 
        m.screen = CreateObject("roSGScreen")
        port = CreateObject("roMessagePort")
        m.screen.setMessagePort(port)
        m.scene = m.screen.CreateScene("SpScene")
        m.global = m.screen.getGlobalNode()

        m.global.addFields({
            SpHelper: CreateObject("roSGNode", "SpHelper")
        })

        m.accountId = accountId
        m.propertyHref = propertyHref
        m.legislationsEnabled = legislationsEnabled

        validOptionalProperties = [
            "authId",
            "campaignEnv",
            "consentLanguage",
            "sdkPath"
        ]

        for each k in validOptionalProperties
            if optional[k] <> invalid then
                m[k] = optional[k]
            end if
        end for

        if optional.baseEndpoint <> invalid then m.constants.baseEndpoint = optional.baseEndpoint

        m.registry = CreateObject("roRegistrySection", "SourcepointSdk")
        m.requestUUID = m.makeRequestUUID()

        ' fetch messages and user consent, and messages
        m.getUserConsent()

        while(true)
            msg = wait(0, m.port)
            msgType = type(msg)

            if msgType = "roSGScreenEvent"
            if msg.isScreenClosed() then return
            end if
        end while
    end sub

    public function getUserConsent() as Dynamic
        if m.userConsent <> invalid then
            return m.userConsent
        endif 

        getMessageTask = createObject("roSGNode", "GetMessage")
        getMessageTask.url = m.addQueryParams(m.constants.baseEndpoint + m.constants.pathGET, { "env": m.env, "consentLanguage": m.consentLanguage })
        getMessageTask.clientMMSOrigin = m.constants.baseEndpoint

        taskKeys = ["accountId", "authId", "campaignEnv", "consentLanguage", "legislationsEnabled", "propertyHref", "pubData", "requestUUID"]

        for each k in taskKeys
            getMessageTask[k] = m[k]
        end for

        getMessageTask.localState = m.getLocalState()
        getMessageTask.control = "RUN"

        port = CreateObject("roMessagePort")

        getMessageTask.observeFieldScoped("state", port)

        while true
            msg = wait(1000, port)
            if type(msg) = "roSGNodeEvent" and msg.getField() = "state" and msg.getData() = "stop" then
                m.setLocalState(getMessageTask.localState)
                m.userConsent = getMessageTask.userConsent
                exit while
            end if
        end while

        getMessageTask.unobserveFieldScoped("state")

        ' always call show messages, it will show or close our screen
        m.showMessages(getMessageTask.messages)

        return m.userConsent
    end function

    private function addQueryParams(uri as String, params as Object) as String
        separator = uri.Instr(0, "?") < 0 ? "?" : "&"

        for each k in params
            if params[k] <> invalid
                uri = uri + separator + k + "=" + params[k].Escape()
                separator = "&"
            end if
        end for

        return uri
    end function

    private function getLocalState() as String
        if m.registry.Exists("localState") then
            return m.registry.read("localState")
        end if

        return ""
    end function

    private function makeRequestUUID() as string
        return "test"
    end function

    private sub setLocalState(localState)
        m.registry.write("localState", localState)
    end sub

    private sub showMessages(messages as Object)
        ' close screen and return if we have no messages
        if messages = invalid or messages.Count() = 0 then
            m.screen.close()
            return
        end if

        print "messages to show:"
        print messages
        
        m.screen.show()
    end sub
end class