class SourcepointSdk
    private accountId
    private env = "stage"
    private campaignEnv = "prod"
    private consentLanguage
    private legislationsEnabled
    private propertyHref    'TODO : is this what we should use? 
    private registry
    private sdkPath = "sourcepoint-sdk"

    public constants = {
        baseEndpoint: "https://cdn.privacy-mgmt.com",
        pathGET: "/wrapper/v2/get_messages",
        pathPOST: "/"
    }

    sub new(accountId as Integer, propertyHref as String, legislationsEnabled = [] as Object, optional = {} as Object)
        m.accountId = accountId
        m.propertyHref = propertyHref
        m.legislationsEnabled = legislationsEnabled

        validOptionalProperties = [
            "authId",
            "campaignEnv",
            "consentLanguage",
            "sdkPath"
        ]

        for each k in validOptionalProperties
            if optional[k] <> invalid then
                m[k] = optional[k]
            end if
        end for

        if optional.baseEndpoint <> invalid then m.constants.baseEndpoint = optional.baseEndpoint

        m.registry = CreateObject("roRegistrySection", "SourcepointSdk")
        m.requestUUID = MakeRequestUUID()
    end sub

    public function get_user_consent() as Dynamic
        getMessageTask = createObject("roSGNode", "GetMessage")
        getMessageTask.url = m.addQueryParams(m.constants.baseEndpoint + m.constants.pathGET, { "env": m.env, "consentLanguage": m.consentLanguage })
        getMessageTask.clientMMSOrigin = m.constants.baseEndpoint

        taskKeys = ["accountId", "authId", "campaignEnv", "consentLanguage", "legislationsEnabled", "propertyHref", "pubData", "requestUUID"]

        for each k in taskKeys
            getMessageTask[k] = m[k]
        end for

        getMessageTask.localState = m.getLocalState()
        getMessageTask.control = "RUN"
        ' m.readLogicTask.observeField("consentData", "displayMessage")
    end function

    private function addQueryParams(uri as String, params as Object) as String
        separator = uri.Instr(0, "?") < 0 ? "?" : "&"

        for each k in params
            if params[k] <> invalid
                uri = uri + separator + k + "=" + params[k].Escape()
                separator = "&"
            end if
        end for

        return uri
    end function

    private function getLocalState() as String
        if m.registry.Exists("localState") then
            return m.registry.read("localState")
        end if

        return ""
    end function

    private sub setLocalState(localState)
        m.registry.write("localState", localState)
    end sub
end class